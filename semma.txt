* non-static object capture using multi-view stereo video
** HOX: not about tracking the dynamic shit but pipeline and general concerns instead

- focus on the non-static (dynamic, morphing) case and video
- quickly introduce the basic pipeline (chain?) on static capture
- a paragraph or two on rendering, no more
- extend to tracking case where the target moves
- present applications on solving a morphing object (face, cloth)
- texture capture: dynamic = easier, morphing = complicated
- label the point and its neighborhood, track it
- registration
- assume fixed camera(s)
- tracking is more established in 2d case; follow texture and features, reproject
- not much realtime issues are considered
- the object is "known", i.e. we're in a lab environment, not e.g. driving outside

SLIDES
- non-static (/dynamic) object capture using multi-view stereo video

** Intro: what?
- non-static: moving or morphing over time
  - video, not just a simple target
- capture: encode the object's visual properties to a computer
  - geometry: 3d structure
  - texture: diffuse color
- multi-view stereo
- Pipeline: capture -> reconstruct -> render
- Object vs. motion capture

** Contents
(do i want this?)
- motivation
- ...

** Motivation: why?
- 3D scanning applications: mapping, object replication, entertainment, cultural heritage, medical, ...
- Non-static uses: movies, video games
- facial expressions; motion/surface capture
  - lots of focus in the literature

** Pipeline
(Works also for the static case)
- Calibration: capture the camera rig parameters
- Imaging: Record the object movement as series of images
- 3D Reconstruction
  - stereo matching, rectification
  - feature tracking
  - triangulation, point clouds
- Meshing: from point clouds to 3D models
  - 3D models need topology data (triangle mesh)
  - point clouds are disorganised groups of just points
  - ``connect the dots'', add texturing and normals
- Rendering
  - Draw the 3D model on the computer screen
  - Often assume surface details from texture

** Calibration
* theory pic
- Intrinsic parameters: focal length, sensor properties
- Extrinsics: relative camera location and rotation
- Given known 3D coordinates, what is the projection matrix?
- Much related to computer graphics in general

** Stereo
* theory pic
- Epipolar lines
- Epipolar constraint
- Rectification

** Multi view stereo
* Joke pic, stanford cam array
- More cameras, more math, more constraints

** Multi view stereo
* Actual camera rig
- Moving object vs. moving camera
- Structure from motion
- Bundle adjustment

** capture issues
- Multi-view video is complicated
- Camera selection
- Synchronization
- Lots of data
- FPS, shutter speed, light

** reconstruction
- compute matching points in the images
- depth images or just point clouds
- pixels have colors too

** face animation
- raw data capture
- 

** meshing
- build triangles out of the point clouds
- UV texture mapping

** rendering
- draw to the screen
- animation: just playback or morph the model
- accurate lightning based on heuristics
  - assume locally uniform colors
  - use high frequencies as lightning hints
  - can classify as reconstruction too

** video: the dynamic case
- a movie is an ordered list of images
  - (and usually audio)
- object of interest moves or deforms over time
- lots of 3d pictures with a timestamp
- yet, all the pictures describe the same object

** sync issues
* |  |  | (kuva)
*  |  |  |
- reconstruction done for ``static'' targets
  - methods assume the ``same'' target from different locations
  - cameras need to be in sync
- same point in time per viewpoint
  - either synchronize cams to grab frames at the same time
  - or e.g. optical flow for interpolation if sync not supported

** interpolation
* flowkuva
- movement slow enough? don't.
- morph pixels between two surrounding frames
  - optical flow

** video tracking[where this?]
- modification to the discussed
- several ways, often replaces parts of the static case
- initial model, register frames to it
- register frames consecutively to each other
- follow features in 2D images

** tracking in 2d
- find features
- search for matching in next/prev
- klt
